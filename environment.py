import pygame as py
import config as cfg
import random as rn
import math
import numpy as np

class House:
    def __init__(self, positions):
        self.c1 = positions[0]
        self.c2 = positions[1]
        self.c3 = positions[2]
        self.c4 = positions[3]
        self.color = (rn.randint(160, 225), 10, 10) if rn.randint(0, 2) else (170, rn.randint(100, 240), 170)
        self.higherDimensionColor = (150, 150, 130)
        self.dividor = 10
        self.lineColor = (40, 40, 40)
        self.shape = []
        self.offset_c1 = ()
        self.offset_c2  =()
        self.offset_c3 = ()
        self.offset_c4 = ()
        self.diff = 0
        self.update()

    def update(self):
        self.offset_c1 = (self.c1[0] + cfg.ofx, self.c1[1] + cfg.ofy)
        self.offset_c2 = (self.c2[0] + cfg.ofx, self.c2[1] + cfg.ofy)
        self.offset_c3 = (self.c3[0] + cfg.ofx, self.c3[1] + cfg.ofy)
        self.offset_c4 = (self.c4[0] + cfg.ofx, self.c4[1] + cfg.ofy)
        self.diff = ((cfg.WIDTH/2 - self.offset_c1[0])/self.dividor, (cfg.HEIGHT/2 - self.offset_c1[1])/self.dividor)
        self.shape = [self.offset_c1, self.offset_c2, self.offset_c3, self.offset_c4]

    def draw(self, surface):
        

        # 3D shape
        h_c1 = (self.offset_c1[0] - self.diff[0], self.offset_c1[1] - self.diff[1])
        h_c2 = (self.offset_c2[0] - self.diff[0], self.offset_c2[1] - self.diff[1])
        h_c3 = (self.offset_c3[0] - self.diff[0], self.offset_c3[1] - self.diff[1])
        h_c4 = (self.offset_c4[0] - self.diff[0], self.offset_c4[1] - self.diff[1])
        space = 2
        py.draw.polygon(surface, (0, 100, 0), [(self.offset_c1[0] - space, self.offset_c1[1] - space), (self.offset_c2[0] + space, self.offset_c2[1] - space), (self.offset_c3[0] + space, self.offset_c3[1] + space), (self.offset_c4[0] - space, self.offset_c4[1] + space)], 4)
        
        py.draw.polygon(surface, self.higherDimensionColor, [self.offset_c1, h_c1, h_c2, self.offset_c2])
        py.draw.polygon(surface, self.higherDimensionColor, [self.offset_c2, h_c2, h_c3, self.offset_c3])
        py.draw.polygon(surface, self.higherDimensionColor, [self.offset_c3, h_c3, h_c4, self.offset_c4])
        py.draw.polygon(surface, self.higherDimensionColor, [self.offset_c4, h_c4, h_c1, self.offset_c1])

        
        py.draw.line(surface, self.lineColor, self.offset_c1, h_c1, 2)
        py.draw.line(surface, self.lineColor, self.offset_c2, h_c2, 2)
        py.draw.line(surface, self.lineColor, self.offset_c3, h_c3, 2)
        py.draw.line(surface, self.lineColor, self.offset_c4, h_c4, 2)
        py.draw.polygon(surface, self.color, [h_c1, h_c2, h_c3, h_c4])

    def print(self):
        print(f"House([({self.c1[0]}, {self.c1[1]}), ({self.c2[0]}, {self.c2[1]}), ({self.c3[0]}, {self.c3[1]}), ({self.c4[0]}, {self.c4[1]})]),")

class City:
    def __init__(self, points=None):
        self.houses = [
            House([(-0.6908039931261101, 616.1550736319472), (108.30919600687389, 535.1550736319472), (67.30919600687389, 477.1550736319472), (-43.69080399312611, 555.1550736319472)]),
House([(122.30919600687389, 448.1550736319472), (191.3091960068739, 394.1550736319472), (232.3091960068739, 447.1550736319472), (159.3091960068739, 490.1550736319472)]),
House([(-1.69080399312611, 457.1550736319472), (79.30919600687389, 399.1550736319472), (43.30919600687389, 355.1550736319472), (-39.69080399312611, 403.1550736319472)]),
House([(-172.6908039931261, 405.1550736319472), (-80.69080399312611, 532.1550736319472), (-38.69080399312611, 497.1550736319472), (-128.6908039931261, 387.1550736319472)]),
House([(-154.6908039931261, 556.1550736319472), (-142.6908039931261, 609.1550736319472), (-102.69080399312611, 595.1550736319472), (-115.69080399312611, 540.1550736319472)]),
House([(-969.6908039931261, -822.8449263680527), (-984.6908039931261, -660.8449263680527), (-939.6908039931261, -652.8449263680527), (-920.6908039931261, -824.8449263680527)]),
House([(-965.6908039931261, -866.8449263680527), (-927.6908039931261, -874.8449263680527), (-927.6908039931261, -1000.8449263680527), (-963.6908039931261, -1008.8449263680527)]),
House([(-961.6908039931261, -1044.8449263680527), (-918.6908039931261, -1048.8449263680527), (-919.6908039931261, -1169.8449263680527), (-965.6908039931261, -1175.8449263680527)]),
House([(-1131.690803993126, -1153.8449263680527), (-1073.690803993126, -1155.8449263680527), (-1071.690803993126, -1058.8449263680527), (-1128.690803993126, -1049.8449263680527)]),
House([(-1128.690803993126, -1005.8449263680527), (-1073.690803993126, -1007.8449263680527), (-1078.690803993126, -919.8449263680527), (-1136.690803993126, -917.8449263680527)]),
House([(-1142.690803993126, -868.8449263680527), (-1079.690803993126, -870.8449263680527), (-1088.690803993126, -794.8449263680527), (-1150.690803993126, -799.8449263680527)]),
House([(-1164.690803993126, -752.8449263680527), (-1093.690803993126, -747.8449263680527), (-1099.690803993126, -683.8449263680527), (-1176.690803993126, -694.8449263680527)]),
House([(-1658.690803993126, -943.8449263680527), (-1497.690803993126, -838.8449263680527), (-1433.690803993126, -903.8449263680527), (-1589.690803993126, -1002.8449263680527)]),
House([(-1754.690803993126, -1043.8449263680527), (-1713.690803993126, -996.8449263680527), (-1590.690803993126, -1090.8449263680527), (-1649.690803993126, -1141.8449263680527)]),
House([(-1588.690803993126, -1055.8449263680527), (-1536.690803993126, -1015.8449263680527), (-1502.690803993126, -1049.8449263680527), (-1548.690803993126, -1088.8449263680527)]),
House([(-1466.6908039931259, -823.8449263680527), (-1394.6908039931259, -784.8449263680527), (-1341.6908039931259, -830.8449263680527), (-1408.6908039931259, -873.8449263680527)]),
House([(-1343.6908039931259, -749.8449263680527), (-1235.6908039931259, -713.8449263680527), (-1208.6908039931259, -773.8449263680527), (-1305.6908039931259, -808.8449263680527)]),
House([(-1585.6908039931259, -1590.8449263680527), (-1514.6908039931259, -1586.8449263680527), (-1513.6908039931259, -1533.8449263680527), (-1586.6908039931259, -1527.8449263680527)]),
House([(-1456.6908039931259, -1584.8449263680527), (-1389.6908039931259, -1590.8449263680527), (-1391.6908039931259, -1547.8449263680527), (-1468.6908039931259, -1540.8449263680527)]),
House([(-1590.6908039931259, -1695.8449263680527), (-1385.6908039931259, -1701.8449263680527), (-1392.6908039931259, -1766.8449263680527), (-1592.6908039931259, -1758.8449263680527)]),
House([(-1762.6908039931259, -1651.8449263680527), (-1638.6908039931259, -1717.8449263680527), (-1672.6908039931259, -1778.8449263680527), (-1796.6908039931259, -1719.8449263680527)]),
House([(-1802.6908039931259, -1467.8449263680527), (-1708.6908039931259, -1548.8449263680527), (-1664.6908039931259, -1507.8449263680527), (-1745.6908039931259, -1417.8449263680527)]),
House([(-1229.6908039931259, -1648.8449263680527), (-1140.6908039931259, -1594.8449263680527), (-1091.6908039931259, -1653.8449263680527), (-1194.6908039931259, -1703.8449263680527)]),
House([(-1210.6908039931259, -1511.8449263680527), (-1263.6908039931259, -1473.8449263680527), (-1169.6908039931259, -1387.8449263680527), (-1135.6908039931259, -1424.8449263680527)]),
House([(268.9086151461124, -554.6533029980446), (373.9086151461124, -601.6533029980446), (344.9086151461124, -668.6533029980446), (229.90861514611242, -624.6533029980446)]),
House([(-98.09138485388758, -546.6533029980446), (67.90861514611242, -532.6533029980446), (76.90861514611242, -611.6533029980446), (-88.09138485388758, -626.6533029980446)]),
House([(-332.0913848538876, -572.6533029980446), (-161.09138485388758, -559.6533029980446), (-150.09138485388758, -630.6533029980446), (-321.0913848538876, -647.6533029980446)]),
House([(-535.0913848538876, -599.6533029980446), (-388.0913848538876, -583.6533029980446), (-380.0913848538876, -645.6533029980446), (-530.0913848538876, -667.6533029980446)]),
House([(-553.0913848538876, -476.65330299804464), (-298.0913848538876, -453.65330299804464), (-305.0913848538876, -390.65330299804464), (-564.0913848538876, -404.65330299804464)]),
House([(-235.09138485388758, -443.65330299804464), (-151.09138485388758, -438.65330299804464), (-165.09138485388758, -394.65330299804464), (-242.09138485388758, -399.65330299804464)]),
House([(806.9086151461124, 45.34669700195536), (923.9086151461124, -50.65330299804464), (884.9086151461124, -98.65330299804464), (775.9086151461124, -11.653302998044637)]),
House([(937.9086151461124, -129.65330299804464), (981.9086151461124, -79.65330299804464), (1154.9086151461124, -205.65330299804464), (1099.9086151461124, -249.65330299804464)]),
House([(1181.9086151461124, -233.65330299804464), (1243.9086151461124, -278.65330299804464), (1152.9086151461124, -375.65330299804464), (1095.9086151461124, -330.65330299804464)]),
House([(1214.9086151461124, -392.65330299804464), (1301.9086151461124, -439.65330299804464), (1337.9086151461124, -373.65330299804464), (1266.9086151461124, -330.65330299804464)]),
House([(1697.9086151461124, -612.6533029980446), (1679.9086151461124, -540.6533029980446), (1741.9086151461124, -530.6533029980446), (1754.9086151461124, -603.6533029980446)]),
House([(1944.9086151461124, -414.65330299804464), (2050.9086151461124, -484.65330299804464), (2102.9086151461124, -425.65330299804464), (2000.9086151461124, -346.65330299804464)]),
House([(1933.9086151461124, -623.6533029980446), (1978.9086151461124, -585.6533029980446), (1881.9086151461124, -493.65330299804464), (1840.9086151461124, -548.6533029980446)]),
House([(1296.9086151461124, -1086.6533029980446), (1363.9086151461124, -1139.6533029980446), (1407.9086151461124, -1107.6533029980446), (1351.9086151461124, -1048.6533029980446)]),
House([(1380.9086151461124, -1022.6533029980446), (1439.9086151461124, -1073.6533029980446), (1574.9086151461124, -987.6533029980446), (1507.9086151461124, -924.6533029980446)]),
House([(1237.9086151461124, -1025.6533029980446), (1199.9086151461124, -977.6533029980446), (1263.9086151461124, -910.6533029980446), (1318.9086151461124, -959.6533029980446)]),
House([(-1002.0913848538876, -529.6533029980446), (-1008.0913848538876, -411.65330299804464), (-943.0913848538876, -399.65330299804464), (-934.0913848538876, -518.6533029980446)]),
House([(-602.0913848538876, -125.65330299804464), (-554.0913848538876, -145.65330299804464), (-536.0913848538876, -99.65330299804464), (-592.0913848538876, -80.65330299804464)]),
House([(-489.0913848538876, -168.65330299804464), (-439.0913848538876, -189.65330299804464), (-421.0913848538876, -147.65330299804464), (-475.0913848538876, -122.65330299804464)]),
House([(-586.0913848538876, -252.65330299804464), (-522.0913848538876, -277.65330299804464), (-543.0913848538876, -324.65330299804464), (-601.0913848538876, -301.65330299804464)]),
House([(-609.0913848538876, 659.3466970019554), (-659.0913848538876, 667.3466970019554), (-640.0913848538876, 719.3466970019554), (-600.0913848538876, 705.3466970019554)]),
House([(-635.0913848538876, 766.3466970019554), (-580.0913848538876, 743.3466970019554), (-554.0913848538876, 792.3466970019554), (-606.0913848538876, 809.3466970019554)]),
House([(-523.0913848538876, 822.3466970019554), (-567.0913848538876, 883.3466970019554), (-501.0913848538876, 911.3466970019554), (-468.0913848538876, 852.3466970019554)]),
House([(-471.0913848538876, 711.3466970019554), (-426.0913848538876, 770.3466970019554), (-373.0913848538876, 731.3466970019554), (-413.0913848538876, 685.3466970019554)]),
House([(1719.9086151461124, -14.653302998044637), (1770.9086151461124, 12.346697001955363), (1751.9086151461124, 48.34669700195536), (1703.9086151461124, 33.34669700195536)]),
House([(1808.9086151461124, 38.34669700195536), (1782.9086151461124, 73.34669700195536), (1827.9086151461124, 97.34669700195536), (1844.9086151461124, 56.34669700195536)]),
House([(1908.9086151461124, -29.653302998044637), (1991.9086151461124, 112.34669700195536), (2043.9086151461124, 89.34669700195536), (1975.9086151461124, -42.65330299804464)]),
House([(1777.9086151461124, -123.65330299804464), (1866.9086151461124, -69.65330299804464), (1896.9086151461124, -119.65330299804464), (1811.9086151461124, -166.65330299804464)]),
House([(1900.9086151461124, 166.34669700195536), (1788.9086151461124, 200.34669700195536), (1769.9086151461124, 143.34669700195536), (1869.9086151461124, 116.34669700195536)]),
House([(612.7750660648449, 454.55325575017105), (685.7750660648449, 446.55325575017105), (698.7750660648449, 505.55325575017105), (610.7750660648449, 516.553255750171)]),
House([(723.7750660648449, 441.55325575017105), (802.7750660648449, 424.55325575017105), (812.7750660648449, 484.55325575017105), (736.7750660648449, 499.55325575017105)]),
House([(743.7750660648449, 353.55325575017105), (715.7750660648449, 302.55325575017105), (805.7750660648449, 246.55325575017105), (836.7750660648449, 300.55325575017105)]),
House([(155.8160165068362, 740.0668789305456), (162.8160165068362, 801.0668789305456), (248.8160165068362, 788.0668789305456), (226.8160165068362, 711.0668789305456)]),
House([(-125.1839834931638, 790.0668789305456), (-51.183983493163794, 788.0668789305456), (-6.183983493163794, 716.0668789305456), (-95.1839834931638, 711.0668789305456)]),
House([(687.8160165068361, -721.9331210694545), (713.8160165068361, -691.9331210694545), (790.8160165068361, -753.9331210694545), (758.8160165068361, -782.9331210694545)]),
House([(757.8160165068361, -822.9331210694545), (814.8160165068361, -773.9331210694545), (899.8160165068361, -839.9331210694545), (854.8160165068361, -890.9331210694545)]),
House([(-1016, -366), (-1020, -288), (-925, -289), (-926, -364)]),
House([(-833, -412), (-840, -303), (-755, -301), (-745, -409)]),
House([(-972, -255), (-975, -213), (-737, -206), (-737, -256)]),
House([(-701, -503), (-708, -401), (-647, -389), (-639, -495)]),
House([(-575, -25), (-507, -51), (-482, 8), (-545, 33)]),
House([(-472, -69), (-450, -19), (-350, -62), (-373, -110)]),
House([(-373, -213), (-300, -69), (-230, -98), (-304, -234)]),
House([(-246, -252), (-191, -130), (-155, -155), (-188, -260)]),
House([(-133, -290), (-93, -173), (22, -226), (-22, -325)]),
House([(65, -330), (77, -243), (203, -266), (197, -343)]),
House([(-412, 22), (39, -199), (77, -145), (-364, 93)]),
House([(635, 68), (671, 141), (740, 93), (699, 15)]),
House([(648, -37), (760, -111), (717, -172), (602, -105)]),
House([(791, -197), (825, -139), (897, -183), (861, -232)]),
House([(255, 369), (350, 306), (382, 359), (288, 418)]),
House([(403, 282), (500, 207), (543, 254), (430, 320)]),
House([(620, 174), (565, 211), (472, 92), (527, 46)]),
House([(484, 159), (329, 246), (290, 190), (436, 97)]),
House([(2008, 149), (2037, 321), (2112, 304), (2083, 139)]),
House([(2038, 379), (2008, 446), (2069, 467), (2104, 401)]),
House([(1983, 481), (1930, 546), (1994, 570), (2031, 507)]),
House([(1750, 657), (1896, 587), (1928, 658), (1776, 725)]),
House([(1924, 723), (2079, 592), (2128, 656), (1978, 774)]),
House([(2134, 446), (2085, 526), (2149, 548), (2193, 465)]),
House([(2146, 285), (2138, 405), (2216, 407), (2209, 269)]),
House([(1755, 511), (1678, 554), (1632, 488), (1715, 449)]),
House([(584, -466), (708, -567), (750, -520), (625, -424)]),
House([(760, -600), (874, -702), (923, -653), (807, -561)]),
House([(955, -740), (1067, -829), (1110, -782), (1021, -706)]),
House([(916, -607), (955, -561), (1079, -647), (1047, -692)]),
House([(1237, -822), (1140, -743), (1194, -674), (1295, -745)]),
House([(115, -546), (165, -550), (162, -672), (110, -672)]),
House([(-852, -771), (-667, -750), (-676, -677), (-857, -689)]),
House([(-689, -640), (-607, -629), (-612, -596), (-695, -604)]),
House([(-632, -757), (-418, -740), (-415, -849), (-618, -868)]),
House([(-1968, -1296), (-2218, -1296), (-2221, -1189), (-1960, -1210)]),
House([(-2124, -1347), (-2059, -1349), (-2064, -1434), (-2127, -1433)]),
House([(-2017, -1447), (-2024, -1393), (-1953, -1392), (-1948, -1452)]),
House([(-1040, -122), (-986, -96), (-1012, -51), (-1071, -70)]),
House([(-938, -80), (-964, -27), (-914, -16), (-878, -67)]),
House([(-1095, -36), (-1129, 1), (-986, 67), (-954, 17)]),
House([(-819, -66), (-886, 85), (-744, 109), (-697, -55)]),
House([(-666, -16), (-658, 31), (-607, 18), (-614, -34)]),
House([(1494, -1265), (1547, -1298), (1565, -1265), (1515, -1237)]),
House([(1454, -1356), (1506, -1396), (1483, -1444), (1422, -1413)]),
House([(1543, -1425), (1616, -1433), (1610, -1480), (1541, -1473)]),
House([(1648, -476), (1615, -430), (1646, -406), (1680, -459)]),
House([(1160, 295), (1185, 405), (1250, 390), (1236, 282)]),
House([(1259, 164), (1205, 198), (1235, 237), (1281, 202)]),
House([(1029, 331), (969, 339), (989, 436), (1051, 424)]),
House([(1078, 470), (1035, 508), (1107, 570), (1138, 524)]),
House([(1131, 598), (1173, 557), (1242, 606), (1202, 652)]),
House([(1267, 616), (1255, 674), (1341, 683), (1350, 634)]),
House([(1118, -1241), (1227, -1159), (1294, -1214), (1189, -1297)]),
House([(-695, 708), (-668, 759), (-717, 784), (-751, 735)]),
House([(-647, 806), (-693, 839), (-650, 889), (-619, 847)]),
House([(-611, 906), (-640, 947), (-597, 965), (-573, 925)]),
House([(-449, 912), (-486, 987), (-428, 1001), (-403, 928)]),
House([(-641, 1033), (-517, 1062), (-538, 1120), (-655, 1110)]),
House([(-712, 909), (-799, 972), (-745, 1031), (-677, 959)]),
House([(-340, 903), (-367, 984), (-293, 999), (-273, 913)]),
House([(-456, 1041), (-354, 1049), (-364, 1115), (-466, 1097)])
        ]
        self.delayTime = 20
        self.delay = self.delayTime
        self.temp_points = []  # Store points temporarily while placing
        self.dirty = True

    def update(self):
        keys = cfg.KEYS()
        if keys[py.K_h] and self.delay <= 0:
            self.delay = self.delayTime
            pos = cfg.MOUSE()
            # Avoid duplicate points
            if not any(abs(p[0] - pos[0]) < 10 and abs(p[1] - pos[1]) < 10 for p in self.temp_points):
                self.temp_points.append(pos)
                self.dirty = True
                if len(self.temp_points) == 4:
                    self.houses.append(House(self.temp_points))
                    self.temp_points = []  # Reset for next house
                    self.dirty = True

        if self.delay > 0:
            self.delay -= 1

        if cfg.offsets_changed:
            self.dirty = True

        self.draw()

    def draw(self):
        
        for pos in self.temp_points:
            py.draw.circle(cfg.screen, cfg.RED, (pos[0] + cfg.ofx, pos[1] + cfg.ofy), 5)
        for house in self.houses:
            house.update()
            if self.underBound(house.shape):
                house.draw(cfg.screen)
                
    
    def underBound(self, pos):
        return any((0 <= p[0] <= cfg.WIDTH) and (0 <= p[1] <= cfg.HEIGHT) for p in pos)

    def print(self):
        print('[')
        for i in self.houses:
            i.print()
        print(']')

class Tree:
    def __init__(self, position):
        self.x = position[0]
        self.y = position[1]
        self.foliage_radius = rn.randint(13, 16)
        self.trunk_color = (139, 69, 19)  # Brown for trunk
        self.line_color = (40, 40, 40)  # Line color for 3D connections
        self.dividor = rn.randint(20, 30)
        self.colors = [(0, rn.randint(160, 200), 0) for i in range(5)]
        self.base_x = 0
        self.base_y = 0
        self.shape = ()
        self.update()

    def update(self):
        self.base_x = self.x + cfg.ofx
        self.base_y = self.y + cfg.ofy
        self.shape = (self.base_x, self.base_y)

    def draw(self, surface):
        
        diff = ((cfg.WIDTH/2 - self.base_x)/self.dividor, (cfg.HEIGHT/2 - self.base_y)/self.dividor)

        high_x = self.base_x - diff[0]
        high_y = self.base_y - diff[1]

        num_points = 4
        x_points = np.linspace(self.base_x, high_x, num_points)
        y_points = np.linspace(self.base_y, high_y, num_points)
        radii = np.linspace(self.foliage_radius, self.foliage_radius / 2, num_points)  # Decrease radius from base to top


        # Draw foliage circles with random green colors
        for i in range(num_points):
            py.draw.circle(surface, self.colors[i], (x_points[i], y_points[i]), int(radii[i]))

    def print(self):
        print(f"Tree(({self.x}, {self.y})),")


    

class Trees:
    def __init__(self, TREES=[]):
        self.tree = [
Tree((604, 359)),
Tree((643, 342)),
Tree((679, 351)),
Tree((576, 456)),
Tree((538, 494)),
Tree((1186, 97)),
Tree((1221, 50)),
Tree((1263, 38)),
Tree((1317, -37)),
Tree((1293, -1)),
Tree((1367, -38)),
Tree((1389, -92)),
Tree((1501, -776)),
Tree((1471, -740)),
Tree((1514, -733)),
Tree((1498, -686)),
Tree((1548, -667)),
Tree((1520, -621)),
Tree((1485, -637)),
Tree((1559, -628)),
Tree((1409, -802)),
Tree((1340, -847)),
Tree((1323, -924)),
Tree((1183, -947)),
Tree((1120, -887)),
Tree((1200, -887)),
Tree((1259, -855)),
Tree((1395, -866)),
Tree((1564, -902)),
Tree((1643, -832)),
Tree((1689, -694)),
Tree((1728, -787)),
Tree((1453, -1113)),
Tree((1123, -1091)),
Tree((990, -1148)),
Tree((881, -1152)),
Tree((807, -1109)),
Tree((694, -1089)),
Tree((679, -975)),
Tree((812, -1002)),
Tree((939, -980)),
Tree((917, -1068)),
Tree((769, -905)),
Tree((746, -1180)),
Tree((579, -824)),
Tree((474, -876)),
Tree((495, -1009)),
Tree((429, -1122)),
Tree((535, -1167)),
Tree((600, -1248)),
Tree((689, -1298)),
Tree((757, -1382)),
Tree((522, -1351)),
Tree((787, -1312)),
Tree((636, -1401)),
Tree((447, -1260)),
Tree((481, -698)),
Tree((410, -610)),
Tree((-94, -437)),
Tree((-33, -427)),
Tree((-1125, -558)),
Tree((-1199, -569)),
Tree((-1179, -504)),
Tree((-1307, -547)),
Tree((-1374, -635)),
Tree((-1555, -719)),
Tree((-1488, -672)),
Tree((-1699, -847)),
Tree((-1657, -791)),
Tree((-1479, -1001)),
Tree((-1404, -965)),
Tree((-1320, -1033)),
Tree((-1250, -914)),
Tree((-1251, -1133)),
Tree((-1329, -1247)),
Tree((-1442, -1197)),
Tree((-1630, -1284)),
Tree((-1525, -1422)),
Tree((-1478, -1349)),
Tree((-1274, -1359)),
Tree((-1153, -1283)),
Tree((-1786, -1307)),
Tree((-1784, -1187)),
Tree((-1948, -1156)),
Tree((-2002, -1342)),
Tree((-1939, -1486)),
Tree((-1846, -1650)),
Tree((-1992, -1079)),
Tree((-1892, -988)),
Tree((-1968, -878)),
Tree((-1766, -720)),
Tree((-1203, -376)),
Tree((-1109, -192)),
Tree((-1231, -271)),
Tree((330, -330)),
Tree((382, -345)),
Tree((365, -285)),
Tree((445, -328)),
Tree((511, -409)),
Tree((267, -252)),
Tree((451, -191)),
Tree((554, -257)),
Tree((319, -95)),
Tree((1903, 230)),
Tree((1904, 307)),
Tree((1817, 409)),
Tree((1875, 380)),
Tree((1789, 485)),
Tree((1833, 265)),
Tree((1803, 324)),
Tree((1635, 2)),
Tree((1529, 24)),
Tree((1432, 64)),
Tree((1510, 118)),
Tree((1588, 102)),
Tree((1854, -370)),
Tree((1752, -327)),
Tree((1834, -299)),
Tree((2178, -873)),
Tree((2176, -803)),
Tree((2058, -865)),
Tree((2020, -786)),
Tree((2022, -708)),
Tree((2156, -722)),
Tree((1744, -1447)),
Tree((1747, -1305)),
Tree((1828, -1285)),
Tree((1924, -1397)),
Tree((-482, 575)),
Tree((-412, 522)),
Tree((-339, 397)),
Tree((-470, 409)),
Tree((-579, 503)),
Tree((-606, 609)),
Tree((-383, 881)),
Tree((-211, 883)),
Tree((-289, 778)),
Tree((20, 1033)),
Tree((120, 1099)),
Tree((270, 1073)),
Tree((203, 945)),
Tree((72, 909)),
Tree((152, 1012)),
Tree((318, 1230)),
Tree((412, 1092)),
Tree((-3, 1226)),
Tree((301, 830)),
Tree((342, 861)),
Tree((400, 861)),
Tree((352, 809)),
Tree((299, 763)),
Tree((367, 916)),
Tree((278, 704)),
Tree((304, 658)),
Tree((356, 717)),
Tree((375, 633)),
Tree((447, 727)),
Tree((478, 862)),
Tree((418, 964)),
Tree((455, 550)),
Tree((489, 628)),
Tree((551, 707)),
Tree((581, 828)),
Tree((540, 949)),
Tree((120, 784)),
Tree((-170, 705)),
Tree((-259, 608)),
Tree((356, 266)),
Tree((204, 353)),
Tree((59, 449)),
Tree((-177, 510)),
Tree((-238, 435)),
Tree((-344, 524)),
Tree((-553, 953)),
Tree((-557, 1006)),
Tree((-315, 1059)),
Tree((-236, 1007)),
Tree((-129, 928)),
Tree((-143, 1015)),
Tree((-152, 1133)),
Tree((103, 1266)),
Tree((224, 1262)),
Tree((-124, 1225)),
Tree((-517, 1132)),
Tree((-747, 804)),
Tree((-760, 857)),
Tree((854, 408)),
Tree((905, 388)),
Tree((886, 437)),
Tree((1009, 462)),
Tree((1286, 256)),
Tree((1294, 331)),
Tree((1357, 289)),
Tree((1340, 392)),
Tree((1314, 151)),
Tree((1251, 434)),
Tree((1640, 564)),
Tree((1537, 566)),
Tree((1713, 678)),
Tree((1953, 620)),
Tree((2053, 555)),
Tree((2165, 583)),
Tree((2099, 351)),
Tree((2082, 96)),
Tree((2161, 177)),
Tree((1736, -135)),
Tree((1651, -138)),
Tree((2088, -531)),
Tree((1912, -367)),
Tree((1677, -501)),
Tree((1834, -492)),
Tree((1992, -625)),
Tree((1862, -631)),
Tree((1746, -645)),
Tree((1622, -928)),
Tree((1568, -1061)),
Tree((1473, -1236)),
Tree((1386, -1365)),
Tree((1061, -1254)),
Tree((1103, -1312)),
Tree((1258, -1284)),
Tree((983, -1313)),
Tree((864, -1344)),
Tree((513, -1267)),
Tree((566, -1432)),
Tree((596, -1330)),
Tree((415, -1343)),
Tree((360, -1237)),
Tree((347, -1133)),
Tree((364, -1048)),
Tree((482, -1087)),
Tree((389, -923)),
Tree((412, -799)),
Tree((499, -784)),
Tree((359, -729)),
Tree((167, -838)),
Tree((281, -848)),
Tree((176, -1002)),
Tree((190, -1121)),
Tree((247, -1290)),
Tree((366, -1461)),
Tree((516, -1524)),
Tree((649, -1481)),
Tree((881, -1448)),
Tree((1015, -1420)),
Tree((731, -1481)),
Tree((67, -682)),
Tree((-112, -660)),
Tree((-141, -571)),
Tree((-348, -667)),
Tree((-605, -711)),
Tree((-586, -674)),
Tree((-791, -624)),
Tree((-893, -659)),
Tree((-877, -852)),
Tree((-1186, -790)),
Tree((-1099, -1198)),
Tree((-1169, -1130)),
Tree((-946, -1224)),
Tree((-886, -1115)),
Tree((-1098, -1593)),
Tree((-1104, -1688)),
Tree((-1249, -1698)),
Tree((-1366, -1728)),
Tree((-1309, -1684)),
Tree((-1625, -1764)),
Tree((-1650, -1546)),
Tree((-1667, -1443)),
Tree((-1812, -1407)),
Tree((-2103, -1165)),
Tree((-2165, -1342)),
Tree((-1671, -989)),
Tree((-1810, -923)),
Tree((-882, -391)),
Tree((-886, -309)),
Tree((-717, -291)),
Tree((-487, -311)),
Tree((-654, -83)),
Tree((-570, 61)),
Tree((-661, 89)),
Tree((-475, 69)),
Tree((-537, 138)),
Tree((-400, -189)),
Tree((-282, -352)),
Tree((117, -184)),
Tree((753, -564)),
Tree((951, -684)),
Tree((1098, -703)),
Tree((1426, -1174)),
Tree((1461, -101)),
Tree((1470, -159)),
Tree((1530, -203)),
Tree((1595, -254)),
Tree((1672, -278)),
Tree((1559, -150)),
Tree((1617, -193)),
Tree((1706, -218)),
Tree((1752, -254)),
Tree((1782, -198)),
Tree((1867, -252)),
Tree((1910, -195)),
Tree((1959, -300)),
Tree((884, -132)),
Tree((754, -59)),
Tree((957, -200)),
Tree((1067, -285)),
Tree((729, 19)),
Tree((1387, -393)),
Tree((1362, -455)),
Tree((1437, -441))
        ]
        self.delay = 0

    def update(self):
        keys = cfg.KEYS()
        if keys[py.K_t] and self.delay <= 0:
            self.delay = 20
            pos = cfg.MOUSE()
            self.tree.append(Tree(pos))

        if self.delay > 0:
            self.delay -= 1

        for t in self.tree:
            t.update()
            if self.underBound(t.shape):
                t.draw(cfg.screen)
        
    def underBound(self, pos):
        return (0 <= pos[0] <= cfg.WIDTH) and (0 <= pos[1] <= cfg.HEIGHT)

    def print(self):
        for t in self.tree:
            t.print()